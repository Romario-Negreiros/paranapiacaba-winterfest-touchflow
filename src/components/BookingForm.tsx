import { useState } from "react";
import { Button } from "@/components/ui/button";
import { Input } from "@/components/ui/input";
import { Label } from "@/components/ui/label";
import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card";
import { Calendar } from "@/components/ui/calendar";
import { VirtualKeyboard } from "./VirtualKeyboard";
import { ArrowLeft, User, Mail, Phone, CreditCard, Calendar as CalendarIcon } from "lucide-react";
import { format } from "date-fns";
import { ptBR } from "date-fns/locale";
import { supabase } from "@/integrations/supabase/client";
import { useToast } from "@/hooks/use-toast";

interface BookingFormProps {
  onBack: () => void;
  onSuccess: (protocolNumber: string, visitDate: string) => void;
}

export function BookingForm({ onBack, onSuccess }: BookingFormProps) {
  const [selectedDate, setSelectedDate] = useState<Date>();
  const [activeField, setActiveField] = useState<string | null>(null);
  const [isSubmitting, setIsSubmitting] = useState(false);
  const [formData, setFormData] = useState({
    cpf: "",
    name: "",
    email: "",
    phone: ""
  });

  const { toast } = useToast();

  const formatCPF = (value: string) => {
    const numbers = value.replace(/\D/g, '');
    return numbers.replace(/(\d{3})(\d{3})(\d{3})(\d{2})/, '$1.$2.$3-$4');
  };

  const formatPhone = (value: string) => {
    const numbers = value.replace(/\D/g, '');
    return numbers.replace(/(\d{2})(\d{5})(\d{4})/, '($1) $2-$3');
  };

  const capitalizeNames = (value: string) => {
    return value.split(' ')
      .map(word => word.charAt(0).toUpperCase() + word.slice(1).toLowerCase())
      .join(' ');
  };

  const handleFieldChange = (field: string, value: string) => {
    let formattedValue = value;
    
    if (field === 'cpf') {
      formattedValue = formatCPF(value);
    } else if (field === 'phone') {
      formattedValue = formatPhone(value);
    } else if (field === 'name') {
      formattedValue = capitalizeNames(value);
    }
    
    setFormData(prev => ({ ...prev, [field]: formattedValue }));
  };

  const handleSubmit = async () => {
    if (!selectedDate || !formData.cpf || !formData.name || !formData.email || !formData.phone) {
      toast({
        title: "Campos obrigatórios",
        description: "Por favor, preencha todos os campos obrigatórios.",
        variant: "destructive",
      });
      return;
    }
    
    setIsSubmitting(true);
    
    try {
      // Try inserting the booking
      const { data, error } = await supabase
        .from('bookings')
        .insert({
          visit_date: format(selectedDate, 'yyyy-MM-dd'),
          full_name: formData.name,
          cpf: formData.cpf,
          email: formData.email,
          phone: formData.phone,
          protocol_number: '' // Will be generated by trigger
        })
        .select('protocol_number')
        .single();

      if (error) {
        console.error('Detailed error:', error);
        toast({
          title: "Erro no agendamento",
          description: `Erro ao salvar o agendamento: ${error.message}`,
          variant: "destructive",
        });
        return;
      }

      // Success - show confirmation screen with protocol
      const protocolNumber = data?.protocol_number || 'N/A';
      const visitDateFormatted = format(selectedDate, "dd 'de' MMMM 'de' yyyy", { locale: ptBR });
      
      // Reset form
      setSelectedDate(undefined);
      setFormData({ cpf: "", name: "", email: "", phone: "" });
      
      // Navigate to confirmation screen
      onSuccess(protocolNumber, visitDateFormatted);
    } catch (error) {
      toast({
        title: "Erro inesperado",
        description: "Ocorreu um erro inesperado. Tente novamente.",
        variant: "destructive",
      });
      console.error('Unexpected error:', error);
    } finally {
      setIsSubmitting(false);
    }
  };

  return (
    <div className="min-h-screen bg-gradient-ice p-2 sm:p-4 lg:p-8">
      <div className="max-w-7xl mx-auto">
        {/* Header */}
        <div className="flex flex-col sm:flex-row items-start sm:items-center gap-3 sm:gap-4 mb-6 sm:mb-8">
          <Button 
            variant="kiosk-outline" 
            size="kiosk"
            onClick={onBack}
            className="flex-shrink-0"
          >
            <ArrowLeft className="w-5 sm:w-6 h-5 sm:h-6" />
            <span className="hidden sm:inline">Voltar</span>
          </Button>
          
          <h1 className="text-2xl sm:text-3xl lg:text-4xl font-bold text-primary">
            Agendamento de Visita
          </h1>
        </div>

        <div className="grid grid-cols-1 lg:grid-cols-2 gap-4 sm:gap-6 lg:gap-8">
          {/* Calendar Section */}
          <Card className="shadow-card animate-fade-in">
            <CardHeader className="pb-4 sm:pb-6">
              <CardTitle className="flex items-center gap-2 text-xl sm:text-2xl">
                <CalendarIcon className="w-5 sm:w-6 h-5 sm:h-6" />
                Escolha a Data
              </CardTitle>
            </CardHeader>
            <CardContent>
              <Calendar
                mode="single"
                selected={selectedDate}
                onSelect={setSelectedDate}
                className="w-full rounded-kiosk border-2 border-primary/20 pointer-events-auto p-2 sm:p-3 text-sm sm:text-base"
                disabled={(date) => {
                  const today = new Date();
                  today.setHours(0, 0, 0, 0);
                  return date < today;
                }}
              />
              
              {selectedDate && (
                <div className="mt-3 sm:mt-4 p-3 sm:p-4 bg-primary/10 rounded-lg">
                  <p className="text-base sm:text-lg font-medium text-primary text-center sm:text-left">
                    Data selecionada: {format(selectedDate, "dd 'de' MMMM 'de' yyyy", { locale: ptBR })}
                  </p>
                </div>
              )}
            </CardContent>
          </Card>

          {/* Form Section */}
          <Card className="shadow-card animate-fade-in">
            <CardHeader className="pb-4 sm:pb-6">
              <CardTitle className="flex items-center gap-2 text-xl sm:text-2xl">
                <User className="w-5 sm:w-6 h-5 sm:h-6" />
                Seus Dados
              </CardTitle>
            </CardHeader>
            <CardContent className="space-y-4 sm:space-y-6">
              {/* CPF */}
              <div>
                <Label htmlFor="cpf" className="text-base sm:text-lg font-medium flex items-center gap-2">
                  <CreditCard className="w-4 sm:w-5 h-4 sm:h-5" />
                  CPF *
                </Label>
                <Input
                  id="cpf"
                  value={formData.cpf}
                  placeholder="000.000.000-00"
                  className="text-base sm:text-lg h-12 sm:h-14 rounded-lg mt-2 touch-manipulation"
                  onFocus={() => setActiveField('cpf')}
                  onChange={(e) => handleFieldChange('cpf', e.target.value)}
                  maxLength={14}
                />
              </div>

              {/* Nome */}
              <div>
                <Label htmlFor="name" className="text-base sm:text-lg font-medium flex items-center gap-2">
                  <User className="w-4 sm:w-5 h-4 sm:h-5" />
                  Nome Completo *
                </Label>
                <Input
                  id="name"
                  value={formData.name}
                  placeholder="Seu nome completo"
                  className="text-base sm:text-lg h-12 sm:h-14 rounded-lg mt-2 touch-manipulation"
                  onFocus={() => setActiveField('name')}
                  onChange={(e) => handleFieldChange('name', e.target.value)}
                />
              </div>

              {/* Email */}
              <div>
                <Label htmlFor="email" className="text-base sm:text-lg font-medium flex items-center gap-2">
                  <Mail className="w-4 sm:w-5 h-4 sm:h-5" />
                  E-mail *
                </Label>
                <Input
                  id="email"
                  type="email"
                  value={formData.email}
                  placeholder="seu@email.com"
                  className="text-base sm:text-lg h-12 sm:h-14 rounded-lg mt-2 touch-manipulation"
                  onFocus={() => setActiveField('email')}
                  onChange={(e) => handleFieldChange('email', e.target.value)}
                />
              </div>

              {/* Telefone */}
              <div>
                <Label htmlFor="phone" className="text-base sm:text-lg font-medium flex items-center gap-2">
                  <Phone className="w-4 sm:w-5 h-4 sm:h-5" />
                  Celular *
                </Label>
                <Input
                  id="phone"
                  value={formData.phone}
                  placeholder="(11) 99999-9999"
                  className="text-base sm:text-lg h-12 sm:h-14 rounded-lg mt-2 touch-manipulation"
                  onFocus={() => setActiveField('phone')}
                  onChange={(e) => handleFieldChange('phone', e.target.value)}
                  maxLength={15}
                />
              </div>

              {/* Submit Button */}
              <Button 
                variant="kiosk" 
                size="kiosk"
                onClick={handleSubmit}
                disabled={isSubmitting}
                className="w-full mt-6 sm:mt-8"
              >
                {isSubmitting ? "Processando..." : "Confirmar Agendamento"}
              </Button>
            </CardContent>
          </Card>
        </div>

        {/* Virtual Keyboard */}
        {activeField && (
          <div className="fixed bottom-0 left-0 right-0 z-50 animate-fade-in">
            <VirtualKeyboard
              activeField={activeField}
              onInput={(value) => handleFieldChange(activeField, formData[activeField as keyof typeof formData] + value)}
              onBackspace={() => {
                const currentValue = formData[activeField as keyof typeof formData];
                handleFieldChange(activeField, currentValue.slice(0, -1));
              }}
              onClose={() => setActiveField(null)}
            />
          </div>
        )}
      </div>
    </div>
  );
}